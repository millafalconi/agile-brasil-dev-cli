# vim: ft=sh
SUBCOMMAND_DESC="\tFunctions to interact with 'ngrok'"
SUBCOMMAND_HELP=$(cat <<EOH
Function to start ngrok with custom configurations.

Define NGROK_CONFIG with your 'ngrok' configuration, example:

NGROK_CONFIG='
tunnels:
  myservice:
    proto:
      http: 8000
  mygit:
    proto:
      tcp:  9418
'

Functions:

$(in_cyan 'ngrok_start "mygit myservice"')
  This will start 'ngrok' tunnels and output the addresses created. If NGROK_CONFIG is
  not defined it will use whatever is configured in ~/.ngrok
EOH
)

function _ngrok_path_check() {
  log "checking if ngrok can be found on PATH"
  type -a ngrok &> /dev/null
  [[ $? != 0 ]] && error "Can't find 'ngrok', please install from 'https://ngrok.com/download' and add it to your PATH"
}

function ngrok_start() {
  _ngrok_path_check
  local ngrok_tunnels="${*}"

  [[ -z ${NGROK_CONFIG} ]] && in_yellow "NGROK_CONFIG not defined, using configuration in ~/.ngrok"

  in_cyan "Starting ngrok, use CTRL-C to stop."
  log "ngrok config: ${NGROK_CONFIG}"

  tunnel_re='Tunnel established at (.*)'
  while read line; do
    if [[ ${line} =~ ${tunnel_re} ]]; then
      echo "ngrok tunnel: ${BASH_REMATCH[1]}"
    fi
    log "[ngrok] ${line}"
  done < <(ngrok -log='stdout' -config=<(cat ~/.ngrok <(echo "${NGROK_CONFIG}")) start ${ngrok_tunnels})
}
